`remote-client.pl` is the Irssi script that exposes the functionality of Irssi through a JSON-RPC interface delover over HTTP and WebSockets.

The interface is unencrypted by itself, so it is adviced to route the connections through an HTTPS endpoint.

Installing
----------

### Installing the requirements

The script depends on the following CPAN packages:
 * Try::Tiny
 * JSON::RPC::Common
 * Digest::SHA

#### If you have root:
 * Just install the packages `cpan Try::Tiny JSON::RPC::Common Digest::SHA`

#### If you don't have root:
 * Install cpanminus: `curl -L http://cpanmin.us | perl - App::cpanminus`
 * Install locallib: `$HOME/perl5/bin/cpanm -n --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)`
 * Install dependencies: `$HOME/perl5/bin/cpanm -n Moose JSON::RPC::Common Try::Tiny Digest::SHA`
 * Add local Perl path to profile `echo 'export PERL5LIB="$HOME/perl5/lib/perl5:"' >> ~/.profile`
 * Set local Perl path for running irssi instance `/script exec push(@INC, "$ENV{'HOME'}/perl5/lib/perl5")`

### Installing the script
 * Create directories: `mkdir -p ~/.irssi/scripts/autorun/`
 * Download script: `curl -o ~/.irssi/scripts/remote-client.pl https://raw.github.com/aeirola/irssi-remote-client/master/irssi/remote-client.pl`
 * (Optional) Set autorun: `ln -s ../remote-client.pl ~/.irssi/scripts/autorun/`
 * Load script (in Irssi): `/script load remote-client`


JSON-RPC API
------------

JSON-RPC v2 protocol for controlling irssi. This is out of date.


### URLs:
HTTP url: /json-rpc (POST)
WebSocket url: /json-rpc/websocket (reserved, not in use)


### Methods:

```
--> { "method": "getWindows", "id": 1}
<-- { "error": null, "id": 1, "result": 
		{
			1: {
				"name": "#irssi",
				"channel": "#irssi"
			},
			...
		}
	}
```

```
--> { "method": "getWindow", "params": {"windowId": 1}, "id": 1}
<-- { "error": null, "id": 1, "result": 
		{
			"name": "#irssi",
			"channel": "#irssi",
			"nicks": [
				{
					"name": "Spaceball",
					"mode": "op"|"voice"|null
				},
				...
			]
		}
	}
```

```
--> { "method": "getWindowLines", "params": {"windowId": 1, "timestamp": "2013-10-24T17:04:12.12341"}, "id": 1}
<-- { "error": null, "id": 1, "result": 
		[
			{
				"timestamp": "2013-10-24T17:06:12.54326",
				"text": "<Spaceball> Lol, i'm on irc"
			},
			...
		]
	}
```

```
--> { "method": "sendMessage": "params": {"windowId": 1, "message": "Lol, i'm on irc"}, "id": 1}
<-- { "error": null", "id": 1, "result": 
		{
			"timestamp": "2013-10-24T17:10:45.12415",
			"text": "lol, i'm on irc"
		}
	}
```


### Usage example

* `/script load remote-client`
* `curl -POST http://localhost:10000/http -d '{ "method": "getWindows", "id": 1}'`


Irssi documentation resources
-----------------------------
* http://irssi.org/documentation: Official
* https://github.com/shabble/irssi-docs: Unofficial


Testing
-------

Requirements:
 * Test::More
 * JSON
 * LWP::UserAgent

Run tests with `perl remote-client.t` in the `irssi` directory. 

Tests use mocked versions of the Irssi perl interfaces. These interfaces are not complete, and only implement the bare functions used by the script.


Future improvements
-------------------
 - Check what happens to listeners and timeouts on connection close
 - Fix test threading so that connection keep-alive will be used
 - OOO Modular structure: commands, tcp handling, http handling, websocket handling, rpc handling
 - Correct JSON-RPC response codes
 - Less dependencies (remove JSON::RPC::Common)
 - GZIP compression (IO::Compress::Gzip)
 - SSL support (HTTP::Daemon::SSL)


